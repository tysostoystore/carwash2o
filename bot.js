// Telegram bot MVP for H2O Car Wash
// Greets user and shows WebApp button
const TelegramBot = require('node-telegram-bot-api');

const { TG_TOKEN, WEBAPP_URL } = require('./config.js');

const TOKEN = TG_TOKEN || 'REPLACE_ME'; // fallback for dev

const bot = new TelegramBot(TOKEN, { polling: true });

console.log('Bot started, polling...');

// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ polling
bot.on('polling_error', (err) => {
  console.error('Polling error:', err);
});

// –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception in bot.js:', err);
  process.exit(1);
});
process.on('unhandledRejection', (err) => {
  console.error('Unhandled Rejection in bot.js:', err);
  // process.exit(1); // –ù–µ –≤–∞–ª–∏–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ª—é–±–æ–π –æ—à–∏–±–∫–µ Telegram API!
});

// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('exit', (code) => {
  console.log('bot.js process exited with code', code);
});

// --- –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
bot.on('message', async (msg) => {
  console.log('[INCOMING MESSAGE]', {
    chat_id: msg.chat && msg.chat.id,
    message_thread_id: msg.message_thread_id,
    from_id: msg.from && msg.from.id,
    from_username: msg.from && msg.from.username,
    text: msg.text,
    date: msg.date
  });

  // --- –†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —Å–µ–±–µ –∏–∑ –≤–µ—Ç–∫–∏ "–†–∞—Å—Å—ã–ª–∫–∞" ---
  const ADMIN_THREAD_ID = 82;
  const ADMIN_GROUP_ID = -1002856721715;
  const TEST_USER_IDS = [411100616];
  if (
    msg.chat && msg.chat.id === ADMIN_GROUP_ID &&
    msg.message_thread_id === ADMIN_THREAD_ID
  ) {
    for (const userId of TEST_USER_IDS) {
      try {
        // --- –ê–ª—å–±–æ–º—ã (media group) ---
        if (msg.media_group_id) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª—å–±–æ–º—ã –≤ –ø–∞–º—è—Ç—å (in-memory, –Ω–∞ –≤—Ä–µ–º—è)
          if (!global._mediaGroups) global._mediaGroups = {};
          if (!global._mediaGroups[msg.media_group_id]) global._mediaGroups[msg.media_group_id] = [];
          global._mediaGroups[msg.media_group_id].push(msg);
          // –ñ–¥—ë–º ~500–º—Å, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
          setTimeout(async () => {
            const group = global._mediaGroups[msg.media_group_id];
            if (group && group.length) {
              // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è sendMediaGroup
              const media = group.map(m => {
                if (m.photo && m.photo.length) {
                  return {
                    type: 'photo',
                    media: m.photo[m.photo.length - 1].file_id,
                    caption: m.caption || m.text || undefined,
                    parse_mode: 'HTML'
                  };
                } else if (m.video) {
                  return {
                    type: 'video',
                    media: m.video.file_id,
                    caption: m.caption || m.text || undefined,
                    parse_mode: 'HTML'
                  };
                } else if (m.document) {
                  return {
                    type: 'document',
                    media: m.document.file_id,
                    caption: m.caption || m.text || undefined,
                    parse_mode: 'HTML'
                  };
                }
                return null;
              }).filter(Boolean);
              if (media.length) {
                await bot.sendMediaGroup(userId, media);
              }
              delete global._mediaGroups[msg.media_group_id];
            }
          }, 600);
        } else if (msg.photo && msg.photo.length) {
          // –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
          const photo = msg.photo[msg.photo.length - 1].file_id;
          await bot.sendPhoto(userId, photo, { caption: msg.caption || msg.text || '', parse_mode: 'HTML' });
        } else if (msg.document) {
          await bot.sendDocument(userId, msg.document.file_id, { caption: msg.caption || msg.text || '', parse_mode: 'HTML' });
        } else if (msg.video) {
          await bot.sendVideo(userId, msg.video.file_id, { caption: msg.caption || msg.text || '', parse_mode: 'HTML' });
        } else if (msg.audio) {
          await bot.sendAudio(userId, msg.audio.file_id, { caption: msg.caption || msg.text || '', parse_mode: 'HTML' });
        } else if (msg.voice) {
          await bot.sendVoice(userId, msg.voice.file_id);
        } else if (msg.sticker) {
          await bot.sendSticker(userId, msg.sticker.file_id);
        } else if (msg.poll) {
          // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ–ø—Ä–æ—Å (poll) –∫–∞–∫ –Ω–æ–≤—ã–π
          await bot.sendPoll(userId, msg.poll.question, msg.poll.options.map(o=>o.text), { is_anonymous: msg.poll.is_anonymous, allows_multiple_answers: msg.poll.allows_multiple_answers });
        } else if (msg.text) {
          await bot.sendMessage(userId, msg.text);
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', userId, e.message);
      }
    }
  }
});

// --- –ê–Ω—Ç–∏—Å–ø–∞–º –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
const lastWelcome = {};

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const now = Date.now();
  // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (lastWelcome[chatId] && now - lastWelcome[chatId] < 60 * 1000) {
    console.log(`Skip welcome for ${chatId}: too soon`);
    return;
  }
  lastWelcome[chatId] = now;
  console.log(`/start from chat ${chatId}`);
  console.log('Sending WebApp button with URL:', WEBAPP_URL);
  try {
    await bot.sendMessage(chatId, 
      'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ H2O –ê–≤—Ç–æ–º–æ–π–∫—É!\n\n' +
      '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π–∫—É —á–µ—Ä–µ–∑ Telegram.\n' +
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∏—Ä–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É.',
      {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üöó –û—Ç–∫—Ä—ã—Ç—å WebApp', web_app: { url: WEBAPP_URL } }
          ]]
        }
      }
    );
  } catch (err) {
    console.error('[TG] sendMessage error in /start:', err && err.response && err.response.body ? err.response.body : err);
  }
});

// TEMP: Log chat_id and message_thread_id for group topics
// –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ /start (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ø–∞–º–∞)
bot.on('message', (msg) => {
  console.log('chat_id:', msg.chat?.id, 'thread_id:', msg.message_thread_id, 'text:', msg.text);
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç —É–±—Ä–∞–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
});
